name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "tag: git tag you want create. (sample 1.0.0)"
        required: true
      dry_run:
        description: "dry_run: true will never create relase/nuget."
        required: true
        default: "false"

env:
  GIT_TAG: ${{ github.event.inputs.tag }}
  DRY_RUN: ${{ github.event.inputs.dry_run }}
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  NUGET_XMLDOC_MODE: skip
  NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED: true
  DISABLE_NETFX_TARGET_BUILD: 1

jobs:
  update-packagejson:
    name: 'Update package.json'
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.update-package.outputs.sha }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/composite/update-package
        id: update-package
        with:
          version: ${{ env.GIT_TAG }}
          target-path: src/GrpcWebSocketBridge.Client.Unity/Assets/Plugins/GrpcWebSocketBridge/package.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          dry-run: true
          #dry-run: ${{ env.DRY_RUN }}

  build:
    name: 'Build & pack GrpcWebSocketBridge'
    runs-on: ubuntu-latest
    needs: [update-packagejson]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            3.1.x
            5.0.x
            6.0.x
      - run: echo "PACKAGE_VERSION=${GIT_TAG}" | tee -a $GITHUB_ENV
      # Build & Pack
      - run: dotnet pack ./src/GrpcWebSocketBridge.AspNetCore/GrpcWebSocketBridge.AspNetCore.csproj -c Release --include-symbols --include-source -p:VersionSuffix=${PACKAGE_VERSION} -o ./publish/
      - run: dotnet pack ./src/GrpcWebSocketBridge.Client/GrpcWebSocketBridge.Client.csproj -c Release --include-symbols --include-source -p:VersionSuffix=${PACKAGE_VERSION} -o ./publish/
      - uses: actions/upload-artifact@v1
        with:
          name: nuget
          path: ./publish/

  build-grpc-dotnet:
    name: 'Build & publish Grpc.Net.Client for Unity WebGL'
    runs-on: ubuntu-latest
    needs: [update-packagejson]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      # Build & Publish
      - run: dotnet publish -f netstandard2.0 -c Release -o ./publish/Grpc.Net.Client/ ./src/External/Grpc.Net.Client
      - uses: actions/upload-artifact@v1
        with:
          name: Grpc.Net.Client-ModifiedForWebGL
          path: ./publish/

  build-unity:
    name: 'Build Unity package'
    needs: [update-packagejson]
    strategy:
      matrix:
        unity: ["2020.3.33f1"]
        include:
          - unity: 2020.3.33f1
            license: UNITY_LICENSE_2020
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-packagejson.outputs.sha }}
      # execute scripts/Export Package
      # /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod PackageExporter.Export
      - name: Export unitypackage
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets[matrix.license] }}
          UNITY_PACKAGE_VERSION: ${{ env.GIT_TAG }}
        with:
          projectPath: src/GrpcWebSocketBridge.Client.Unity
          unityVersion: ${{ matrix.unity }}
          targetPlatform: StandaloneWindows
          buildMethod: PackageExporter.Export
          versioning: None

      - name: Check all .meta is commited
        run: |
          if git ls-files --others --exclude-standard -t | grep --regexp='[.]meta$'; then
            echo "Detected .meta file generated. Do you forgot commit a .meta file?"
            exit 1
          else
            echo "Great, all .meta files are commited."
          fi
        working-directory: src/GrpcWebSocketBridge.Client.Unity

      # Store artifacts.
      - uses: actions/upload-artifact@v1
        with:
          name: GrpcWebSocketBridge.${{ env.GIT_TAG }}.unitypackage
          path: ./src/GrpcWebSocketBridge.Client.Unity/GrpcWebSocketBridge.${{ env.GIT_TAG }}.unitypackage

  push:
    name: 'Push NuGet packages'
    needs: [build, build-grpc-dotnet, build-unity]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Publish to NuGet
        run: dotnet nuget push "./artifacts/nuget/*.nupkg" --skip-duplicate -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}

  create-release:
    if: github.event.inputs.dry_run == 'false'
    name: 'Create GitHub Release'
    needs: [update-packagejson, build, build-grpc-dotnet, build-unity]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Create Release
        uses: softprops/action-gh-release@v1
        id: create_release
        with:
          tag_name: ${{ env.GIT_TAG }}
          commitish: ${{ needs.update-packagejson.outputs.sha }}
          draft: true
          prerelease: false
          generate_release_notes: true

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create archive (Grpc.Net.Client-ModifiedForWebGL.zip)
        run: zip -r --junk-paths Grpc.Net.Client-ModifiedForWebGL.zip ./Grpc.Net.Client-ModifiedForWebGL/
        working-directory: artifacts

      - name: Display downloaded artifact files
        run: ls -lR
        working-directory: artifacts

      # Upload to Releases
      - name: Upload to Release (Grpc.Net.Client-ModifiedForWebGL.zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Grpc.Net.Client-ModifiedForWebGL.zip
          asset_name: Grpc.Net.Client-ModifiedForWebGL.${{ env.GIT_TAG }}.zip
          asset_content_type: application/octet-stream

      - name: Upload to Release (GrpcWebSocketBridge.unitypackage)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/GrpcWebSocketBridge.${{ env.GIT_TAG }}.unitypackage/GrpcWebSocketBridge.${{ env.GIT_TAG }}.unitypackage
          asset_name: GrpcWebSocketBridge.${{ env.GIT_TAG }}.unitypackage
          asset_content_type: application/octet-stream
