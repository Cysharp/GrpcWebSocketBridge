name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "tag: git tag you want create. (sample 1.0.0)"
        required: true
      dry-run:
        description: "dry-run: true will never create relase/nuget."
        required: true
        default: false
        type: boolean

env:
  GIT_TAG: ${{ github.event.inputs.tag }}
  DRY_RUN: ${{ github.event.inputs.dry-run }}

jobs:
  update-packagejson:
    uses: Cysharp/Actions/.github/workflows/update-packagejson.yaml@main
    with:
      file-path: ./src/GrpcWebSocketBridge.Client.Unity/Assets/Plugins/GrpcWebSocketBridge/package.json
      tag: ${{ github.event.inputs.tag }}
      dry-run: ${{ fromJson(github.event.inputs.dry-run) }}

  build:
    name: "Build & pack GrpcWebSocketBridge"
    runs-on: ubuntu-latest
    needs: [update-packagejson]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: Cysharp/Actions/.github/actions/setup-dotnet@main
        with:
          dotnet-version: |
            3.1.x
            5.0.x
            6.0.x
      - run: echo "PACKAGE_VERSION=${GIT_TAG}" | tee -a $GITHUB_ENV
      # Build & Pack
      - run: dotnet build ./src/GrpcWebSocketBridge.AspNetCore/ -c Release -p:VersionSuffix=${PACKAGE_VERSION}
      - run: dotnet build ./src/GrpcWebSocketBridge.Client/ -c Release -p:VersionSuffix=${PACKAGE_VERSION}
      - run: dotnet pack -c Release --include-symbols --include-source --no-build -p:VersionPrefix=${PACKAGE_VERSION} -o ./publish/
      - uses: actions/upload-artifact@v1
        with:
          name: nuget
          path: ./publish/

  build-grpc-dotnet:
    name: "Build & publish Grpc.Net.Client for Unity WebGL"
    runs-on: ubuntu-latest
    needs: [update-packagejson]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: Cysharp/Actions/.github/actions/setup-dotnet@main
      # Build & Publish
      - run: dotnet publish -f netstandard2.0 -c Release -o ./publish/Grpc.Net.Client/netstandard2.0/ ./src/External/Grpc.Net.Client
      - run: dotnet publish -f netstandard2.1 -c Release -o ./publish/Grpc.Net.Client/netstandard2.1/ ./src/External/Grpc.Net.Client
      - uses: actions/upload-artifact@v1
        with:
          name: Grpc.Net.Client-ModifiedForWebGL
          path: ./publish/

  build-unity:
    name: "Build Unity package"
    needs: [update-packagejson]
    strategy:
      matrix:
        unity: ["2020.3.33f1"]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.update-packagejson.outputs.sha }}
      # execute scripts/Export Package
      # /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod PackageExporter.Export
      - name: Export unitypackage
        uses: Cysharp/Actions/.github/actions/unity-builder@main
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_PACKAGE_VERSION: ${{ env.GIT_TAG }}
        with:
          projectPath: src/GrpcWebSocketBridge.Client.Unity
          unityVersion: ${{ matrix.unity }}
          targetPlatform: StandaloneWindows
          buildMethod: PackageExporter.Export

      - uses: Cysharp/Actions/.github/actions/check-metas@main # check meta files
        with:
          directory: src/GrpcWebSocketBridge.Client.Unity

      # Store artifacts.
      - uses: actions/upload-artifact@v1
        with:
          name: GrpcWebSocketBridge.${{ env.GIT_TAG }}.unitypackage
          path: ./src/GrpcWebSocketBridge.Client.Unity/GrpcWebSocketBridge.${{ env.GIT_TAG }}.unitypackage

  push:
    if: ${{ github.event.inputs.dry-run == 'false' }}
    name: "Push NuGet packages"
    needs: [build, build-grpc-dotnet, build-unity]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: Cysharp/Actions/.github/actions/setup-dotnet@main
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Publish to NuGet
        run: dotnet nuget push "./artifacts/nuget/*.nupkg" --skip-duplicate -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}

  create-release:
    if: ${{ github.event.inputs.dry-run == 'false' }}
    name: "Create GitHub Release"
    needs: [update-packagejson, build, build-grpc-dotnet, build-unity]
    runs-on: ubuntu-latest
    steps:
      - uses: Cysharp/Actions/.github/actions/setup-dotnet@main

      - name: Create Release
        uses: softprops/action-gh-release@v1
        id: create_release
        with:
          tag_name: ${{ env.GIT_TAG }}
          commitish: ${{ needs.update-packagejson.outputs.sha }}
          draft: true
          prerelease: false
          generate_release_notes: true

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create archive (Grpc.Net.Client-ModifiedForWebGL.zip)
        run: zip -r Grpc.Net.Client-ModifiedForWebGL.zip ./Grpc.Net.Client-ModifiedForWebGL/
        working-directory: artifacts

      - name: Display downloaded artifact files
        run: ls -lR
        working-directory: artifacts

      # Upload to Releases
      - name: Upload to Release (Grpc.Net.Client-ModifiedForWebGL.zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Grpc.Net.Client-ModifiedForWebGL.zip
          asset_name: Grpc.Net.Client-ModifiedForWebGL.${{ env.GIT_TAG }}.zip
          asset_content_type: application/octet-stream

      - name: Upload to Release (GrpcWebSocketBridge.unitypackage)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/GrpcWebSocketBridge.${{ env.GIT_TAG }}.unitypackage/GrpcWebSocketBridge.${{ env.GIT_TAG }}.unitypackage
          asset_name: GrpcWebSocketBridge.${{ env.GIT_TAG }}.unitypackage
          asset_content_type: application/octet-stream

  cleanup:
    if: ${{ needs.update-packagejson.outputs.is-branch-created == 'true' }}
    needs: [update-packagejson, create-release]
    uses: Cysharp/Actions/.github/workflows/clean-packagejson-branch.yaml@main
    with:
      branch: ${{ needs.update-packagejson.outputs.branch-name }}
